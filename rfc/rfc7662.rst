.. contents:: Содержание
   :depth: 5


OAuth 2.0 самоонализ токена
===========================

1. Вступление
-------------

В OAuth 2.0 [RFC6749] содержимое токенов непрозрачно для клиентов.
Это означает, что клиенту не нужно ничего знать о содержании или структуре самого токена, если таковой имеется.
Однако к токену может быть привязано большое количество метаданных,
таких как его текущая действительность,
утвержденные области действия и информация о контексте, в котором был выпущен токен.
Эти фрагменты информации часто имеют жизненно важное значение для защищенных ресурсов,
принимающих решения об авторизации на основе представленных токенов.
Поскольку OAuth 2.0 не определяет протокол для сервера ресурсов для получения метаинформации о токене,
который он получил от сервера авторизации,
было разработано несколько различных подходов для устранения этого пробела.
К ним относятся использование форматов структурированных токенов, таких как JWT [RFC7519],
или проприетарных механизмов межсервисного взаимодействия
(таких как общие базы данных и защищенные сервисные шины предприятия), которые передают информацию о токенах.

Эта спецификация определяет протокол,
который позволяет авторизованным защищенным ресурсам запрашивать сервер авторизации
для определения набора метаданных для данного токена,
который был предоставлен им клиентом OAuth 2.0.
Эти метаданные включают в себя то, активен ли токен в данный момент
(или если срок его действия истек, или он был отозван иным образом),
какие права доступа несет токен (обычно передаются через области действия OAuth 2.0)
и контекст авторизации, в котором был предоставлен токен
(включая того, кто авторизовал токен и какому клиенту он был выдан).
Самоанализ токена позволяет защищенному ресурсу запрашивать эту информацию независимо от того,
содержится ли она в самом токене,
что позволяет использовать этот метод вместе со структурированными значениями токена или независимо от них.
Кроме того, защищенный ресурс может использовать механизм, описанный в этой спецификации,
для интроспекции маркера в конкретном контексте решения об авторизации
и установления соответствующих метаданных о маркере для надлежащего принятия этого решения об авторизации.

1.1. Условные обозначения
~~~~~~~~~~~~~~~~~~~~~~~~~

2. Конечная точка самоанализа
-----------------------------

Конечная точка самоанализа - это конечная точка OAuth 2.0,
которая принимает параметр, представляющий токен OAuth 2.0, и возвращает документ JSON [RFC7159],
представляющий метаинформацию, окружающую токен, включая информацию о том,
активен ли этот токен в данный момент.
Определение активного токена зависит от сервера авторизации,
но обычно это токен, который был выдан этим сервером авторизации,
срок действия которого не истек,
он не был отозван и действителен для использования на защищенном ресурсе, выполняющем вызов самоанализа.

Конечная точка самоанализа ДОЛЖНА быть защищена механизмом безопасности транспортного уровня,
как описано в разделе 4.
Средства, с помощью которых защищенный ресурс обнаруживает местоположение конечной точки самоанализа,
выходят за рамки этой спецификации.

2.1. Запрос на самоанализ
~~~~~~~~~~~~~~~~~~~~~~~~~

Защищенный ресурс вызывает конечную точку самоанализа с помощью HTTP-запроса POST [RFC7231] с параметрами,
отправленными в виде данных «application/x-www-form-urlencoded», как определено в [W3C.REC-html5-20141028].
Защищенный ресурс отправляет параметр, представляющий токен,
вместе с необязательными параметрами, представляющими дополнительный контекст,
который известен защищенному ресурсу, чтобы помочь серверу авторизации в его ответе.

token
    ОБЯЗАТЕЛЬНЫЙ. Строковое значение токена.
    Для токенов доступа это значение «access_token», возвращаемое из конечной точки токена,
    определенной в OAuth 2.0 [RFC6749], раздел 5.1.
    Для токенов обновления это значение «refresh_token», возвращаемое из конечной точки токена,
    как определено в OAuth 2.0 [RFC6749], раздел 5.1.
    Другие типы токенов выходят за рамки данной спецификации.

token_type_hint
    НЕОБЯЗАТЕЛЬНЫЙ. Подсказка о типе токена, отправленного на самоанализ.
    Защищенный ресурс МОЖЕТ передать этот параметр,
    чтобы помочь серверу авторизации оптимизировать поиск токена.
    Если сервер не может найти токен с помощью данной подсказки,
    он ДОЛЖЕН расширить поиск по всем поддерживаемым типам токенов.
    Сервер авторизации МОЖЕТ игнорировать этот параметр,
    особенно если он может автоматически определить тип токена.
    Значения для этого поля определены в реестре «Подсказки типа токена OAuth»,
    определенном в отзыве токена OAuth [RFC7009].

Конечная точка самоанализа МОЖЕТ принимать другие НЕОБЯЗАТЕЛЬНЫЕ параметры
для предоставления дополнительного контекста запросу.
Например, сервер авторизации может захотеть узнать IP-адрес клиента, обращающегося к защищенному ресурсу,
чтобы определить, может ли правильный клиент представить токен.
Определение этого или любых других параметров выходит за рамки этой спецификации
и должно быть определено сервисной документацией или расширениями этой спецификации.
Если сервер авторизации не может определить состояние токена без дополнительной информации,
он ДОЛЖЕН вернуть ответ самоанализа, указывающий, что токен не активен, как описано в Разделе 2.2.

Чтобы предотвратить атаки со сканированием токенов,
конечная точка ДОЛЖНА также требовать определенную форму авторизации для доступа к этой конечной точке, 
например аутентификацию клиента, как описано в OAuth 2.0 [RFC6749],
или отдельный токен доступа OAuth 2.0, такой как токен носителя,
описанный в OAuth 2.0 Использование токен носителя [RFC6750].
Методы управления и проверки этих учетных данных аутентификации выходят за рамки этой спецификации.

Например, ниже показан защищенный ресурс,
вызывающий конечную точку самоанализа токена для запроса о токене носителя OAuth 2.0.
Защищенный ресурс использует отдельный токен носителя OAuth 2.0 для авторизации этого вызова.

Ниже приведен ненормативный пример запроса:

    POST /introspect HTTP/1.1
    Host: server.example.com
    Accept: application/json
    Content-Type: application/x-www-form-urlencoded
    Authorization: Bearer 23410913-abewfq.123483

    token=2YotnFZFEjr1zCsicMWpAA

В этом примере защищенный ресурс использует идентификатор клиента и секрет клиента
для аутентификации в конечной точке самоанализа.
Защищенный ресурс также отправляет подсказку типа маркера, указывающую, что он запрашивает маркер доступа.

Ниже приведен ненормативный пример запроса:

    POST /introspect HTTP/1.1
    Host: server.example.com
    Accept: application/json
    Content-Type: application/x-www-form-urlencoded
    Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

    token=mF_9.B5f-4.1JqM&token_type_hint=access_token

2.2. Самоанализ Ответ
~~~~~~~~~~~~~~~~~~~~~

Сервер отвечает объектом JSON [RFC7159] в формате «application/json» со следующими членами верхнего уровня.

active
    ОБЯЗАТЕЛЬНЫЙ. Логический индикатор того, активен ли представленный токен в данный момент.
    Специфика «активного» состояния токена
    будет варьироваться в зависимости от реализации сервера авторизации и информации,
    которую он хранит о своих токенах, но «истинное» значение, возвращаемое для свойства active,
    обычно указывает, что данный токен был выдан этим сервером авторизации,
    не был отозван владельцем ресурса и находится в пределах заданного временного интервала действия
    (например, после времени выдачи и до истечения срока действия).
    См. Раздел 4 для получения информации о реализации таких проверок.

scope
     НЕОБЯЗАТЕЛЬНЫЙ. Строка JSON, содержащая разделенный пробелами список областей действия,
     связанных с этим токеном, в формате, описанном в разделе 3.3 OAuth 2.0 [RFC6749].

client_id
    НЕОБЯЗАТЕЛЬНЫЙ. Идентификатор клиента OAuth 2.0, запросившего этот токен.

username
    НЕОБЯЗАТЕЛЬНЫЙ. Человекочитаемый идентификатор владельца ресурса, авторизовавшего этот токен.

token_type
    НЕОБЯЗАТЕЛЬНЫЙ. Тип токена, определенный в разделе 5.1 OAuth 2.0 [RFC6749].

exp
    НЕОБЯЗАТЕЛЬНЫЙ. Целочисленная метка времени,
    в количестве секунд с 1 января 1970 года по всемирному координированному времени,
    указывающая, когда истечет срок действия этого токена, как определено в JWT [RFC7519].

iat
    НЕОБЯЗАТЕЛЬНЫЙ. Целочисленная метка времени,
    в количестве секунд с 1 января 1970 года по всемирному координированному времени,
    указывающая, когда этот токен был первоначально выпущен, как определено в JWT [RFC7519].

nbf
    НЕОБЯЗАТЕЛЬНЫЙ. Целочисленная отметка времени,
    в количестве секунд с 1 января 1970 года по всемирному координированному времени,
    указывающая, когда этот токен не следует использовать ранее, как определено в JWT [RFC7519].

sub
    НЕОБЯЗАТЕЛЬНЫЙ. Строковый идентификатор службы или список строковых идентификаторов,
    представляющих предполагаемую аудиторию для этого токена, как определено в JWT [RFC7519].

iss
    НЕОБЯЗАТЕЛЬНЫЙ. Строка, представляющая эмитента этого токена, как определено в JWT [RFC7519].

jti
    НЕОБЯЗАТЕЛЬНЫЙ. Строковый идентификатор токена, определенный в JWT [RFC7519].

Конкретные реализации МОГУТ расширить эту структуру своими собственными именами ответов
для конкретных служб в качестве членов верхнего уровня этого объекта JSON.
Имена ответов, предназначенные для использования в разных доменах,
ДОЛЖНЫ быть зарегистрированы в реестре «OAuth Token Introspection Response», определенном в разделе 3.1.

Сервер авторизации МОЖЕТ по-разному реагировать на разные защищенные ресурсы, отправляющие один и тот же запрос.
Например, сервер авторизации МОЖЕТ ограничить,
какие области из данного токена возвращаются для каждого защищенного ресурса,
чтобы защищенный ресурс не мог узнать больше о большей сети, чем это необходимо для его работы.

Ответ МОЖЕТ быть кэширован защищенным ресурсом для повышения производительности
и снижения нагрузки на конечную точку самоанализа,
но за счет живучести информации, используемой защищенным ресурсом для принятия решений об авторизации.
См. Раздел 4 для получения дополнительной информации о компромиссе, когда ответ кэшируется.

Например, следующий ответ содержит набор информации об активном токене:

Ниже приведен ненормативный пример ответа:

    HTTP/1.1 200 OK
    Content-Type: application/json

    {
      "active": true,
      "client_id": "l238j323ds-23ij4",
      "username": "jdoe",
      "scope": "read write dolphin",
      "sub": "Z5O3upPC88QrAjx00dis",
      "aud": "https://protected.example.net/resource",
      "iss": "https://server.example.com/",
      "exp": 1419356238,
      "iat": 1419350238,
      "extension_field": "twenty-seven"
    }

Если вызов интроспекции правильно авторизован,
но токен не активен, не существует на этом сервере
или защищенному ресурсу не разрешено проводить интроспекцию этого конкретного токена,
тогда сервер авторизации ДОЛЖЕН вернуть ответ интроспекции с установленным полем ``active`` в ``false``.
Обратите внимание, что во избежание раскрытия слишком большой части состояния сервера авторизации
третьей стороне, сервер авторизации НЕ ДОЛЖЕН включать какую-либо дополнительную информацию
о неактивном токене, в том числе о том, почему токен неактивен.

Ниже приведен ненормативный пример ответа для токена,
который был отозван или недействителен по иным причинам:

    HTTP/1.1 200 OK
    Content-Type: application/json

    {
      "active": false
    }
