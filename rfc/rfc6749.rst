.. contents:: Содержание
   :depth: 5

The OAuth 2.0 Authorization Framework
=====================================

1. Введение
-----------
1.1. Роли
~~~~~~~~~
1.2. Поток протокола
~~~~~~~~~~~~~~~~~~~~
1.3. Authorization Grant
~~~~~~~~~~~~~~~~~~~~~~~~
1.3.2. Implicit
^^^^^^^^^^^^^^^

Неявное предоставление - это упрощенный поток кода авторизации, оптимизированный для клиентов, реализованный в браузере с использованием языка сценариев, такого как JavaScript. В неявном потоке вместо выдачи клиенту кода авторизации клиенту выдается токен доступа напрямую (в результате авторизации владельца ресурса). Тип предоставления является неявным, поскольку промежуточные учетные данные (такие как код авторизации) не выдаются (и позже используются для получения токена доступа).

При выдаче токена доступа во время неявного потока предоставления сервер авторизации не аутентифицирует клиента. В некоторых случаях личность клиента может быть проверена с помощью URI перенаправления, используемого для доставки токена доступа клиенту. Маркер доступа может быть предоставлен владельцу ресурса или другим приложениям, имеющим доступ к пользовательскому агенту владельца ресурса.

Неявные гранты улучшают отзывчивость и эффективность некоторых клиентов (например, клиента, реализованного как приложение в браузере), поскольку они сокращают количество циклов, необходимых для получения токена доступа. Однако это удобство следует сопоставить с последствиями для безопасности использования неявных грантов, таких как описанные в разделах 10.3 и 10.16, особенно когда доступен тип предоставления кода авторизации.

2. Регистрация клиента
----------------------

Перед запуском протокола клиент регистрируется на сервере авторизации. Средства, с помощью которых клиент регистрируется на сервере авторизации, выходят за рамки данной спецификации, но обычно включают взаимодействие конечного пользователя с регистрационной формой HTML.

Регистрация клиента не требует прямого взаимодействия между клиентом и сервером авторизации. При поддержке сервера авторизации регистрация может полагаться на другие средства для установления доверия и получения требуемых свойств клиента (например, URI перенаправления, типа клиента). Например, регистрация может быть выполнена с использованием утверждения, выданного самостоятельно или третьей стороной, или сервером авторизации, выполняющим обнаружение клиента с использованием доверенного канала.

При регистрации клиента разработчик клиента ОБЯЗАН:

* указать тип клиента, как описано в разделе 2.1
* предоставить свои URI перенаправления клиента, как описано в Разделе 3.1.2
* включать любую другую информацию, требуемую сервером авторизации (например, название приложения, веб-сайт, описание, изображение логотипа, принятие юридических условий).

2.1. Типы клиентов
~~~~~~~~~~~~~~~~~~

OAuth определяет два типа клиентов в зависимости от их способности безопасно аутентифицироваться с помощью сервера авторизации (т.е. Способности поддерживать конфиденциальность своих учетных данных клиента):

confidential
    Клиенты, способные поддерживать конфиденциальность своих учетных данных (например, клиент, реализованный на защищенном сервере с ограниченным доступом к учетным данным клиента) или способные к безопасной аутентификации клиента с использованием других средств.

public
    Клиенты, неспособные поддерживать конфиденциальность своих учетных данных (например, клиенты, выполняющиеся на устройстве, используемом владельцем ресурса, таком как установленное собственное приложение или приложение на основе веб-браузера), и неспособные к безопасной аутентификации клиента с помощью любых других средств.

Обозначение типа клиента основано на определении сервером авторизации безопасной аутентификации и приемлемых уровнях раскрытия учетных данных клиента. Серверу авторизации НЕ СЛЕДУЕТ делать предположения о типе клиента.

Клиент может быть реализован как распределенный набор компонентов, каждый с различным типом клиента и контекстом безопасности (например, распределенный клиент с конфиденциальным серверным компонентом и общедоступным компонентом на основе браузера). Если сервер авторизации не поддерживает таких клиентов или не дает рекомендаций по их регистрации, клиент ДОЛЖЕН зарегистрировать каждый компонент как отдельный клиент.

Эта спецификация была разработана для следующих клиентских профилей:

веб приложение (web application)
    Веб-приложение - это конфиденциальный клиент, работающий на веб-сервере. Владельцы ресурсов получают доступ к клиенту через пользовательский интерфейс HTML, отображаемый в пользовательском агенте на устройстве, используемом владельцем ресурса. Учетные данные клиента, а также любой токен доступа, выданный клиенту, хранятся на веб-сервере и не доступны для владельца ресурса.

приложение на основе пользовательского агента (user-agent-based application)
    Приложение на основе пользовательского агента - это общедоступный клиент, в котором клиентский код загружается с веб-сервера и выполняется в рамках пользовательского агента (например, веб-браузера) на устройстве, используемом владельцем ресурса. Данные протокола и учетные данные легко доступны (и часто видны) владельцу ресурса. Поскольку такие приложения находятся в пользовательском агенте, они могут беспрепятственно использовать возможности пользовательского агента при запросе авторизации.

собственное приложение (native application)
    Собственное приложение - это общедоступный клиент, установленный и выполняемый на устройстве, используемом владельцем ресурса. Данные протокола и учетные данные доступны владельцу ресурса. Предполагается, что любые учетные данные для аутентификации клиента, включенные в приложение, могут быть извлечены. С другой стороны, динамически выдаваемые учетные данные, такие как токены доступа или токены обновления, могут получить приемлемый уровень защиты. Как минимум, эти учетные данные защищены от враждебных серверов, с которыми приложение может взаимодействовать. На некоторых платформах эти учетные данные могут быть защищены от других приложений, находящихся на том же устройстве.

2.2. Идентификация клиента
~~~~~~~~~~~~~~~~~~~~~~~~~~

Сервер авторизации выдает зарегистрированному клиенту идентификатор клиента - уникальную строку, представляющую регистрационную информацию, предоставленную клиентом. Идентификатор клиента не секрет; он предоставляется владельцу ресурса и НЕ ДОЛЖЕН использоваться отдельно для аутентификации клиента. Идентификатор клиента уникален для сервера авторизации.

Размер строки идентификатора клиента не определен данной спецификацией. Клиент должен избегать предположений о размере идентификатора. Серверу авторизации СЛЕДУЕТ задокументировать размер любого выдаваемого им идентификатора.

2.3. Проверка подлинности клиента
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если тип клиента является конфиденциальным, клиент и сервер авторизации устанавливают метод аутентификации клиента, подходящий для требований безопасности сервера авторизации. Сервер авторизации МОЖЕТ принимать любую форму аутентификации клиента, отвечающую его требованиям безопасности.

Конфиденциальным клиентам обычно выдается (или устанавливается) набор учетных данных клиента, используемых для аутентификации на сервере авторизации (например, пароль, пара открытого / закрытого ключей). Сервер авторизации МОЖЕТ установить метод аутентификации клиента с общедоступными клиентами. Однако сервер авторизации НЕ ДОЛЖЕН полагаться на общедоступную аутентификацию клиента с целью идентификации клиента.

Клиент НЕ ДОЛЖЕН использовать более одного метода аутентификации в каждом запросе.

2.3.1. Пароль клиента
^^^^^^^^^^^^^^^^^^^^^

Клиенты, владеющие клиентским паролем, МОГУТ использовать схему аутентификации HTTP Basic, как определено в [RFC2617], для аутентификации на сервере авторизации. Идентификатор клиента кодируется с использованием алгоритма кодирования ``application/x-www-form-urlencoded`` согласно Приложению B, и закодированное значение используется в качестве имени пользователя; пароль клиента кодируется с использованием того же алгоритма и используется в качестве пароля. Сервер авторизации ДОЛЖЕН поддерживать схему аутентификации HTTP Basic для аутентификации клиентов, которым был выдан пароль клиента.

Например (с дополнительными разрывами строк только для отображения)::

    Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3

В качестве альтернативы сервер авторизации МОЖЕТ поддерживать включение учетных данных клиента в тело запроса с использованием следующих параметров:

client_id
    ОБЯЗАТЕЛЬНЫЙ. Идентификатор клиента, выданный клиенту во время процесса регистрации, описанного в разделе 2.2.

client_secret
    ОБЯЗАТЕЛЬНЫЙ. Секрет клиента. Клиент МОЖЕТ опустить параметр, если секрет клиента является пустой строкой.

Включение учетных данных клиента в тело запроса с использованием этих двух параметров НЕ РЕКОМЕНДУЕТСЯ и ДОЛЖНО быть ограничено клиентами, которые не могут напрямую использовать схему аутентификации HTTP Basic (или другие схемы аутентификации HTTP на основе пароля). Параметры могут быть переданы только в теле запроса и НЕ ДОЛЖНЫ включаться в URI запроса.

Например, запрос на обновление токена доступа (раздел 6) с использованием параметров тела (с дополнительными разрывами строк только для отображения)::

    POST /token HTTP/1.1
    Host: server.example.com
    Content-Type: application/x-www-form-urlencoded

    grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
    &client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw

Сервер авторизации ДОЛЖЕН требовать использования TLS, как описано в разделе 1.6, при отправке запросов с использованием аутентификации по паролю.

Поскольку этот метод аутентификации клиента включает в себя пароль, сервер авторизации ДОЛЖЕН защищать любую конечную точку, использующую его, от brute force атак.

2.3.2. Другие методы аутентификации
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Сервер авторизации МОЖЕТ поддерживать любую подходящую схему аутентификации HTTP, соответствующую его требованиям безопасности. При использовании других методов аутентификации сервер авторизации ДОЛЖЕН определить соответствие между идентификатором клиента (регистрационной записью) и схемой аутентификации.

2.4. Незарегистрированные клиенты
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Эта спецификация не исключает использования незарегистрированных клиентов. Однако использование таких клиентов выходит за рамки данной спецификации и требует дополнительного анализа безопасности и анализа влияния на совместимость.

3. Конечные точки протокола
---------------------------

В процессе авторизации используются две конечные точки сервера авторизации (ресурсы HTTP):

* Конечная точка авторизации - используется клиентом для получения авторизации от владельца ресурса через перенаправление пользовательского агента.
* Конечная точка токена - используется клиентом для обмена разрешения авторизации на токен доступа, обычно с аутентификацией клиента.

А также одна клиентская конечная точка:

* Конечная точка перенаправления - используется сервером авторизации для возврата клиенту ответов, содержащих учетные данные авторизации, через пользовательский агент владельца ресурса.

Не каждый тип разрешения на авторизацию использует обе конечные точки. Типы предоставления расширений МОГУТ определять дополнительные конечные точки по мере необходимости.

3.1. Конечная точка авторизации
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Конечная точка авторизации используется для взаимодействия с владельцем ресурса и получения разрешения на авторизацию. Сервер авторизации ДОЛЖЕН сначала проверить личность владельца ресурса. Способ, которым сервер авторизации аутентифицирует владельца ресурса (например, имя пользователя и пароль для входа, файлы cookie сеанса), выходит за рамки данной спецификации.

Средства, с помощью которых клиент получает местоположение конечной точки авторизации, выходят за рамки данной спецификации, но местоположение обычно указывается в документации службы.

URI конечной точки МОЖЕТ включать компонент запроса в формате ``application/x-www-form-urlencoded`` (согласно Приложению B) ([RFC3986] раздел 3.4), который ДОЛЖЕН быть сохранен при добавлении дополнительных параметров запроса. URI конечной точки НЕ ДОЛЖЕН включать компонент фрагмента.

Поскольку запросы к конечной точке авторизации приводят к аутентификации пользователя и передаче учетных данных в открытом виде (в HTTP-ответе), сервер авторизации ДОЛЖЕН требовать использования TLS, как описано в разделе 1.6, при отправке запросов к конечной точке авторизации.

Сервер авторизации ДОЛЖЕН поддерживать использование метода HTTP "GET" [RFC2616] для конечной точки авторизации, а также МОЖЕТ поддерживать использование метода "POST".

Параметры, отправленные без значения, ДОЛЖНЫ обрабатываться так, как если бы они не были включены в запрос. Сервер авторизации ДОЛЖЕН игнорировать нераспознанные параметры запроса. Параметры запроса и ответа НЕ ДОЛЖНЫ включаться более одного раза.

3.1.1. Тип ответа
^^^^^^^^^^^^^^^^^

Конечная точка авторизации используется потоками типа предоставления кода авторизации и неявного типа предоставления. Клиент информирует сервер авторизации о желаемом типе гранта, используя следующий параметр:

response_type
    ОБЯЗАТЕЛЬНЫЙ. Значение ДОЛЖНО быть одним из ``code`` для запроса кода авторизации, как описано в разделе 4.1.1, ``token`` для запроса маркера доступа (неявное предоставление), как описано в разделе 4.2.1, или зарегистрированного значения расширения, как описано в Раздел 8.4.

Типы ответов расширения МОГУТ содержать список значений, разделенных пробелами (``%x20``), где порядок значений не имеет значения (например, тип ответа ``a b`` такой же, как ``b a``). Значение таких составных типов ответов определяется их соответствующими спецификациями.

Если в запросе авторизации отсутствует параметр response_type или если тип ответа не понят, сервер авторизации ДОЛЖЕН вернуть ответ с ошибкой, как описано в разделе 4.1.2.1.

3.1.2. Конечная точка перенаправления
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
После завершения взаимодействия с владельцем ресурса сервер авторизации направляет пользовательский агент владельца ресурса обратно клиенту. Сервер авторизации перенаправляет пользовательского агента к конечной точке перенаправления клиента, ранее установленной с сервером авторизации во время процесса регистрации клиента или при выполнении запроса авторизации.

URI конечной точки перенаправления ДОЛЖЕН быть абсолютным URI, как определено в разделе 4.3 [RFC3986]. URI конечной точки МОЖЕТ включать компонент запроса в формате ``application/x-www-form-urlencoded`` (согласно Приложению B) ([RFC3986] раздел 3.4), который ДОЛЖЕН быть сохранен при добавлении дополнительных параметров запроса. URI конечной точки НЕ ДОЛЖЕН включать компонент фрагмента.

3.1.2.1. Конфиденциальность запроса конечной точки
##################################################

Конечной точке перенаправления СЛЕДУЕТ требовать использования TLS, как описано в разделе 1.6, когда запрашиваемый тип ответа - ``code`` или ``token``, или когда запрос перенаправления приведет к передаче конфиденциальных учетных данных по открытой сети. Эта спецификация не требует обязательного использования TLS, поскольку на момент написания этой статьи требование развертывания TLS от клиентов было серьезным препятствием для многих разработчиков клиентов. Если TLS недоступен, серверу авторизации СЛЕДУЕТ предупредить владельца ресурса о небезопасной конечной точке до перенаправления (например, отображать сообщение во время запроса авторизации).

Отсутствие безопасности на транспортном уровне может серьезно повлиять на безопасность клиента и защищенных ресурсов, к которым ему разрешен доступ. Использование безопасности транспортного уровня особенно важно, когда процесс авторизации используется клиентом как форма делегированной аутентификации конечного пользователя (например, сторонняя служба входа в систему).

3.1.2.2. Требования к регистрации
#################################

Сервер авторизации ДОЛЖЕН требовать, чтобы следующие клиенты зарегистрировали свою конечную точку перенаправления:

* Публичные клиента (public).
* Конфиденциальные клиенты, использующие неявный тип предоставления (implicit).

Серверу авторизации СЛЕДУЕТ требовать, чтобы все клиенты зарегистрировали свою конечную точку перенаправления до использования конечной точки авторизации.

Серверу авторизации СЛЕДУЕТ требовать, чтобы клиент предоставил полный URI перенаправления (клиент МОЖЕТ использовать параметр запроса «состояние» для достижения индивидуальной настройки каждого запроса). Если требование регистрации полного URI перенаправления невозможно, серверу авторизации СЛЕДУЕТ потребовать регистрацию схемы URI, полномочий и пути (позволяя клиенту динамически изменять только компонент запроса URI перенаправления при запросе авторизации).

Сервер авторизации МОЖЕТ позволить клиенту зарегистрировать несколько конечных точек перенаправления.

Отсутствие требования регистрации URI перенаправления может позволить злоумышленнику использовать конечную точку авторизации в качестве открытого перенаправителя, как описано в Разделе 10.15.

3.1.2.3. Динамическая конфигурация
##################################

Если было зарегистрировано несколько URI перенаправления, если была зарегистрирована только часть URI перенаправления или если URI перенаправления не был зарегистрирован, клиент ДОЛЖЕН включить URI перенаправления в запрос авторизации с использованием параметра запроса redirect_uri.

Когда URI перенаправления включен в запрос авторизации, сервер авторизации ДОЛЖЕН сравнить и сопоставить полученное значение по крайней мере с одним из зарегистрированных URI перенаправления (или компонентов URI), как определено в разделе 6 [RFC3986], если какие-либо URI перенаправления были зарегистрированы . Если регистрация клиента включала полный URI перенаправления, сервер авторизации ДОЛЖЕН сравнить два URI, используя простое сравнение строк, как определено в разделе 6.2.1 [RFC3986].

3.1.2.4. Недействительная конечная точка
########################################

Если запрос авторизации не проходит проверку из-за отсутствия, недопустимого или несоответствующего URI перенаправления, серверу авторизации СЛЕДУЕТ проинформировать владельца ресурса об ошибке и НЕ ДОЛЖНО автоматически перенаправлять пользовательский агент на недопустимый URI перенаправления.

3.1.2.5. Контент конечной точки
###############################

Запрос перенаправления к конечной точке клиента обычно приводит к ответу документа HTML, обрабатываемому пользовательским агентом. Если ответ HTML обслуживается непосредственно в результате запроса перенаправления, любой сценарий, включенный в документ HTML, будет выполняться с полным доступом к URI перенаправления и учетным данным, которые он содержит.

Клиенту НЕ СЛЕДУЕТ включать какие-либо сторонние скрипты (например, стороннюю аналитику, социальные плагины, рекламные сети) в ответ конечной точки перенаправления. Вместо этого ему СЛЕДУЕТ извлечь учетные данные из URI и снова перенаправить пользовательский агент на другую конечную точку, не раскрывая учетные данные (в URI или в другом месте). Если сторонние скрипты включены, клиент ДОЛЖЕН гарантировать, что его собственные скрипты (используемые для извлечения и удаления учетных данных из URI) будут выполнены первыми.

3.2. Конечная точка токена
~~~~~~~~~~~~~~~~~~~~~~~~~~

Конечная точка токена используется клиентом для получения токена доступа путем предоставления разрешения на авторизацию или токена обновления. Конечная точка токена используется с каждым предоставлением авторизации, за исключением неявного типа предоставления (поскольку токен доступа выдается напрямую).

Средства, с помощью которых клиент получает местоположение конечной точки токена, выходят за рамки данной спецификации, но местоположение обычно указывается в документации службы.

URI конечной точки МОЖЕТ включать компонент запроса в формате ``application/x-www-form-urlencoded`` (согласно Приложению B) ([RFC3986] раздел 3.4), который ДОЛЖЕН быть сохранен при добавлении дополнительных параметров запроса. URI конечной точки НЕ ДОЛЖЕН включать компонент фрагмента.

Поскольку запросы к конечной точке токена приводят к передаче учетных данных в открытом виде (в запросе и ответе HTTP), сервер авторизации ДОЛЖЕН требовать использования TLS, как описано в разделе 1.6, при отправке запросов конечной точке токена.

Клиент ДОЛЖЕН использовать метод HTTP "POST" при выполнении запросов токена доступа.

Параметры, отправленные без значения, ДОЛЖНЫ обрабатываться так, как если бы они не были включены в запрос. Сервер авторизации ДОЛЖЕН игнорировать нераспознанные параметры запроса. Параметры запроса и ответа НЕ ДОЛЖНЫ включаться более одного раза.

3.2.1. Проверка подлинности клиента
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Конфиденциальные клиенты или другие клиенты, выдавшие учетные данные клиента, ДОЛЖНЫ пройти аутентификацию на сервере авторизации, как описано в разделе 2.3, при выполнении запросов к конечной точке токена. Аутентификация клиента используется для:

* Обеспечение привязки токенов обновления и кодов авторизации к клиенту, которому они были выданы. Аутентификация клиента имеет решающее значение, когда код авторизации передается в конечную точку перенаправления по незащищенному каналу или когда URI перенаправления не зарегистрирован полностью.

* Восстановление после взлома клиента путем отключения клиента или изменения его учетных данных, что не позволяет злоумышленнику злоупотреблять украденными токенами обновления. Изменение одного набора учетных данных клиента происходит значительно быстрее, чем отзыв всего набора токенов обновления.

* Внедрение передовых методов управления аутентификацией, которые требуют периодической ротации учетных данных. Ротация всего набора токенов обновления может быть сложной задачей, в то время как ротация одного набора учетных данных клиента значительно проще.

Клиент МОЖЕТ использовать параметр запроса ``client_id`` для идентификации себя при отправке запросов к конечной точке токена. В запросе "authorization_code" "grant_type" к конечной точке токена неаутентифицированный клиент ДОЛЖЕН отправить свой ``client_id``, чтобы не допустить непреднамеренного принятия кода, предназначенного для клиента с другим ``client_id``. Это защищает клиента от подмены кода аутентификации. (Это не обеспечивает дополнительной безопасности для защищаемого ресурса.)

3.3. Область действия токена доступа
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Конечные точки авторизации и токена позволяют клиенту указать область запроса доступа с помощью параметра запроса ``scope``. В свою очередь, сервер авторизации использует параметр ответа ``scope``, чтобы информировать клиента об области действия выданного токена доступа.

Значение параметра ``scope`` выражается в виде списка строк, разделенных пробелами и чувствительных к регистру. Строки определяются сервером авторизации. Если значение содержит несколько строк, разделенных пробелами, их порядок не имеет значения, и каждая строка добавляет дополнительный диапазон доступа к запрошенной области. ::

    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )

Сервер авторизации МОЖЕТ полностью или частично игнорировать область действия, запрошенную клиентом, на основе политики сервера авторизации или инструкций владельца ресурса. Если область выданного токена доступа отличается от области, запрошенной клиентом, сервер авторизации ДОЛЖЕН включить параметр ответа "scope", чтобы информировать клиента о фактически предоставленной области.

Если клиент пропускает параметр области при запросе авторизации, сервер авторизации ДОЛЖЕН либо обработать запрос, используя предварительно определенное значение по умолчанию, либо отклонить запрос, указывая на недопустимую область действия. Серверу авторизации СЛЕДУЕТ задокументировать свои требования к области и значение по умолчанию (если определено).

4. Получение авторизации
------------------------

Чтобы запросить токен доступа, клиент получает разрешение от владельца ресурса. Авторизация выражается в форме предоставления авторизации, которую клиент использует для запроса токена доступа. OAuth определяет четыре типа предоставления: код авторизации, неявный, учетные данные пароля владельца ресурса и учетные данные клиента. Он также предоставляет механизм расширения для определения дополнительных типов грантов.

4.1. Authorization Code Grant
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Тип предоставления кода авторизации используется для получения как токенов доступа, так и токенов обновления и оптимизирован для конфиденциальных клиентов. Поскольку это поток на основе перенаправления, клиент должен иметь возможность взаимодействовать с пользовательским агентом владельца ресурса (обычно веб-браузером) и принимать входящие запросы (через перенаправление) от сервера авторизации. ::

     +----------+
     | Владелец |
     | ресурса  |
     |          |
     +----------+
          ^
          |
         (B)
     +----|-----+        Идентификация клиента               +---------------+
     |         -+----(A)-- & Перенаправление URI ----------->|               |
     |  User-   |                                            |     Сервер    |
     |  Agent  -+----(B)-- Пользователь аутентифицируется -->|  авторизации  |
     |          |                                            |               |
     |         -+----(C)-- Код авторизации -----------------<|               |
     +-|----|---+                                            +---------------+
       |    |                                                    ^      v
      (A)  (C)                                                   |      |
       |    |                                                    |      |
       ^    v                                                    |      |
     +---------+                                                 |      |
     |         |>---(D)-- Код авторизации -----------------------'      |
     | Клиент  |          & Перенаправление URI                         |
     |         |                                                        |
     |         |<---(E)----- Токен доступа -----------------------------'
     +---------+       (w/ Опционально Refresh Token)

     Примечание: Строки, иллюстрирующие шаги (A), (B) и (C),
     разбиты на две части по мере их прохождения через пользовательский агент.

                     Рисунок 3: Authorization Code Flow

Схема, показанная на рисунке 3, включает следующие шаги:

:(A): Клиент инициирует поток, направляя пользовательский агент владельца ресурса к конечной точке авторизации. Клиент включает в себя свой идентификатор клиента, запрошенную область, локальное состояние и URI перенаправления, на который сервер авторизации отправит пользовательский агент обратно после предоставления (или отказа) доступа.

:(B): Сервер авторизации аутентифицирует владельца ресурса (через пользовательский агент) и устанавливает, предоставляет ли владелец ресурса или отклоняет запрос доступа клиента.

:(C): Предполагая, что владелец ресурса предоставляет доступ, сервер авторизации перенаправляет пользовательский агент обратно клиенту, используя URI перенаправления, предоставленный ранее (в запросе или во время регистрации клиента). URI перенаправления включает код авторизации и любое локальное состояние, предоставленное клиентом ранее.

:(D): Клиент запрашивает токен доступа у конечной точки токена сервера авторизации, включая код авторизации, полученный на предыдущем шаге. При выполнении запроса клиент аутентифицируется на сервере авторизации. Клиент включает URI перенаправления, используемый для получения кода авторизации для проверки.

:(E): Сервер авторизации аутентифицирует клиента, проверяет код авторизации и гарантирует, что полученный URI перенаправления совпадает с URI, используемым для перенаправления клиента на этапе (C). Если он действителен, сервер авторизации отвечает токеном доступа и, необязательно, токеном обновления.

4.1.1. Запрос на авторизацию
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Клиент создает URI запроса, добавляя следующие параметры к компоненту запроса URI конечной точки авторизации, используя формат ``application/x-www-form-urlencoded`` согласно Приложению B:

response_type
    ОБЯЗАТЕЛЬНЫЙ. Значение ДОЛЖНО быть установлено на ``code``.

client_id
    ОБЯЗАТЕЛЬНЫЙ. Идентификатор клиента, как описано в разделе 2.2.

redirect_uri
    НЕ ОБЯЗАТЕЛЬНЫЙ. Как описано в разделе 3.1.2.

scope
    область действия запроса доступа, описанная раздел 3.3.

state
    РЕКОМЕНДУЕМЫЕ. Непрозрачное значение, используемое клиентом для поддержания состояния между запросом и обратным вызовом. Сервер авторизации включает это значение при перенаправлении пользовательского агента обратно клиенту. Параметр СЛЕДУЕТ использовать для предотвращения подделки межсайтовых запросов, как описано в Разделе 10.12.

Клиент направляет владельца ресурса к сконструированному URI, используя ответ перенаправления HTTP, или другими способами, доступными ему через пользовательский агент.

Например, клиент указывает пользовательскому агенту выполнить следующий HTTP-запрос с использованием TLS (с дополнительными разрывами строк только для отображения)::

    GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
    Host: server.example.com

Сервер авторизации проверяет запрос, чтобы убедиться, что все необходимые параметры присутствуют и действительны. Если запрос действителен, сервер авторизации аутентифицирует владельца ресурса и получает решение об авторизации (запрашивая у владельца ресурса или устанавливая одобрение другими способами).

Когда решение принято, сервер авторизации направляет пользовательского агента на предоставленный клиентский URI перенаправления, используя ответ перенаправления HTTP или другие средства, доступные ему через пользовательский агент.

4.1.2. Ответ авторизации
^^^^^^^^^^^^^^^^^^^^^^^^

Если владелец ресурса предоставляет запрос доступа, сервер авторизации выдает код авторизации и доставляет его клиенту, добавляя следующие параметры в компонент запроса URI перенаправления, используя формат ``application/x-www-form-urlencoded``, согласно Приложению B:

code
    ОБЯЗАТЕЛЬНЫЙ. Код авторизации, сгенерированный сервером авторизации. Код авторизации ДОЛЖЕН истечь вскоре после его выдачи, чтобы снизить риск утечки. РЕКОМЕНДУЕТСЯ максимальное время жизни кода авторизации 10 минут. Клиент НЕ ДОЛЖЕН использовать код авторизации более одного раза. Если код авторизации используется более одного раза, сервер авторизации ДОЛЖЕН отклонить запрос и ДОЛЖЕН отозвать (когда это возможно) все токены, ранее выпущенные на основе этого кода авторизации. Код авторизации привязан к идентификатору клиента и URI перенаправления.

state
    ОБЯЗАТЕЛЬНЫЙ, если параметр ``state`` присутствовал в запросе авторизации клиента. Точное значение, полученное от клиента.

Например, сервер авторизации перенаправляет пользовательского агента, отправляя следующий HTTP-ответ::

    HTTP/1.1 302 Found
    Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz

Клиент ДОЛЖЕН игнорировать нераспознанные параметры ответа. Размер строки кода авторизации в данной спецификации не определен. Клиент должен избегать предположений о размерах кодовых значений. Серверу авторизации СЛЕДУЕТ задокументировать размер любого значения, которое он выдает.

4.1.2.1. Ответ об ошибке
########################

Если запрос не выполняется из-за отсутствия, недопустимого или несоответствующего URI перенаправления, или если идентификатор клиента отсутствует или недействителен, сервер авторизации ДОЛЖЕН сообщить владельцу ресурса об ошибке и НЕ ДОЛЖЕН автоматически перенаправлять пользовательский агент на недопустимый URI перенаправления.

Если владелец ресурса отклоняет запрос доступа или если запрос не выполняется по причинам, отличным от отсутствующего или недействительного URI перенаправления, сервер авторизации информирует клиента, добавляя следующие параметры в компонент запроса URI перенаправления, используя ``application/x-www-form-urlencoded`` согласно Приложению B:

error
    ОБЯЗАТЕЛЬНЫЙ. Один из следующих кодов ошибки ASCII [USASCII]:

    invalid_request
        В запросе отсутствует обязательный параметр, он включает недопустимое значение параметра, включает параметр более одного раза или имеет другой неправильный формат.

    unauthorized_client
        Клиент не авторизован для запроса кода авторизации с помощью этого метода.

    access_denied
        Владелец ресурса или сервер авторизации отклонил запрос.

    unsupported_response_type
        Сервер авторизации не поддерживает получение кода авторизации с помощью этого метода.

    invalid_scope
        Запрошенная область недопустима, неизвестна или имеет неправильный формат.

    server_error
        Сервер авторизации обнаружил непредвиденное условие, которое помешало ему выполнить запрос. (Этот код ошибки необходим, потому что код состояния HTTP 500 Internal Server Error не может быть возвращен клиенту через перенаправление HTTP.)

    temporary_unavailable
        Сервер авторизации в настоящее время не может обработать запрос из-за временной перегрузки или обслуживания сервера. (Этот код ошибки необходим, потому что код состояния HTTP 503 Service Unavailable не может быть возвращен клиенту через перенаправление HTTP.)

    Значения параметра ``error`` НЕ ДОЛЖНЫ включать символы вне набора ``%x20-21 / %x23-5B / %x5D-7E``.

error_description
    НЕ ОБЯЗАТЕЛЬНЫЙ. Удобочитаемый текст ASCII [USASCII], содержащий дополнительную информацию, которая помогает разработчику клиента понять возникшую ошибку. Значения параметра ``error_description`` НЕ ДОЛЖНЫ включать символы вне набора ``%x20-21 / %x23-5B / %x5D-7E``.

error_uri
    НЕ ОБЯЗАТЕЛЬНЫЙ. URI, идентифицирующий удобочитаемую веб-страницу с информацией об ошибке, используемый для предоставления разработчику клиента дополнительной информации об ошибке. Значения параметра ``error_uri`` ДОЛЖНЫ соответствовать синтаксису ссылки URI и, следовательно, НЕ ДОЛЖНЫ включать символы вне набора ``%x21 / %x23-5B / %x5D-7E``.

state
    ОБЯЗАТЕЛЬНЫЙ, если параметр ``state`` присутствовал в запросе авторизации клиента. Точное значение, полученное от клиента.

Например, сервер авторизации перенаправляет пользовательского агента, отправляя следующий HTTP-ответ::

    HTTP/1.1 302 Found
    Location: https://client.example.com/cb?error=access_denied&state=xyz

4.1.3. Запрос токена доступа
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Клиент делает запрос к конечной точке токена, отправляя следующие параметры в формате ``application/x-www-form-urlencoded`` согласно Приложению B с кодировкой символов UTF-8 в теле объекта HTTP-запроса:

grant_type
    ОБЯЗАТЕЛЬНЫЙ. Значение ДОЛЖНО быть установлено на «authorization_code».

code
    ОБЯЗАТЕЛЬНЫЙ. Код авторизации, полученный от сервера авторизации.

redirect_uri
    ОБЯЗАТЕЛЬНЫЙ, если параметр «redirect_uri» был включен в запрос авторизации, как описано в разделе 4.1.1, и их значения ДОЛЖНЫ быть идентичными.

client_id
    ОБЯЗАТЕЛЬНЫЙ, если клиент не аутентифицируется на сервере авторизации, как описано в разделе 3.2.1.

Если тип клиента является конфиденциальным или клиенту были выданы учетные данные клиента (или назначены другие требования аутентификации), клиент ДОЛЖЕН пройти аутентификацию на сервере авторизации, как описано в разделе 3.2.1.

Например, клиент выполняет следующий HTTP-запрос с использованием TLS (с дополнительными разрывами строк только для отображения)::

    POST /token HTTP/1.1
    Host: server.example.com
    Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
    Content-Type: application/x-www-form-urlencoded

    grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb

Сервер авторизации ДОЛЖЕН:

* требовать аутентификацию клиента для конфиденциальных клиентов или для любого клиента, которому были выданы учетные данные клиента (или с другими требованиями аутентификации),

* аутентифицировать клиента, если аутентификация клиента включена,

* убедиться, что код авторизации был выдан аутентифицированному конфиденциальному клиенту, или, если клиент является общедоступным, убедиться, что код был выдан на ``client_id`` в запросе,

* убедиться, что код авторизации действителен, и

* убедиться, что параметр ``redirect_uri`` присутствует, если параметр ``redirect_uri`` был включен в первоначальный запрос авторизации, как описано в разделе 4.1.1, и если он включен, убедиться, что их значения идентичны.

4.1.4. Ответ токена доступа
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Если запрос токена доступа действителен и авторизован, сервер авторизации выдает токен доступа и дополнительный токен обновления, как описано в Разделе 5.1. Если запрос аутентификации клиента завершился неудачно или недействителен, сервер авторизации возвращает ответ об ошибке, как описано в Разделе 5.2.

Пример успешного ответа::

    HTTP/1.1 200 OK
    Content-Type: application/json;charset=UTF-8
    Cache-Control: no-store
    Pragma: no-cache

    {
        "access_token":"2YotnFZFEjr1zCsicMWpAA",
        "token_type":"example",
        "expires_in":3600,
        "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
        "example_parameter":"example_value"
    }

4.2. Implicit Grant
~~~~~~~~~~~~~~~~~~~

Неявный тип предоставления используется для получения токенов доступа (он не поддерживает выдачу токенов обновления) и оптимизирован для общедоступных клиентов, которые, как известно, работают с определенным URI перенаправления. Эти клиенты обычно реализуются в браузере с использованием языка сценариев, например JavaScript.

Поскольку это поток на основе перенаправления, клиент должен иметь возможность взаимодействовать с пользовательским агентом владельца ресурса (обычно веб-браузером) и принимать входящие запросы (через перенаправление) от сервера авторизации.

В отличие от типа предоставления кода авторизации, в котором клиент делает отдельные запросы на авторизацию и для токена доступа, клиент получает токен доступа в результате запроса авторизации.

Неявный тип предоставления не включает аутентификацию клиента и зависит от присутствия владельца ресурса и регистрации URI перенаправления. Поскольку токен доступа закодирован в URI перенаправления, он может быть доступен владельцу ресурса и другим приложениям, находящимся на том же устройстве. ::

    +----------+
    | Владелец |
    | ресурса  |
    |          |
    +----------+
         ^
         |
        (B)
    +----|-----+          Идентификация клиента             +---------------+
    |         -+----(A)-- & Перенаправление URI ----------->|               |
    |  User-   |                                            |     Сервер    |
    |  Agent  -|----(B)-- Пользователь аутентифицируется -->|  авторизации  |
    |          |                                            |               |
    |          |<---(C)--- Перенаправление URI ------------<|               |
    |          |          с токеном доступа                 +---------------+
    |          |            во фрагменте
    |          |                                    +---------------+
    |          |----(D)--- Перенаправление URI ---->|   Клиентский  |
    |          |          без фрагмента             |     ресурс    |
    |          |                                    |  размещенный  |
    |     (F)  |<---(E)------- Скрипт -------------<|  в Интернете  |
    |          |                                    +---------------+
    +-|--------+
      |    |
     (A)  (G) Токен доступа
      |    |
      ^    v
    +---------+
    |         |
    | Клиент  |
    |         |
    +---------+

    Примечание: строки, иллюстрирующие шаги (A) и (B),
    разбиты на две части по мере их прохождения через пользовательский агент.

                       Рисунок 4: Implicit Grant Flow

Схема, показанная на рисунке 4, включает следующие шаги:

:(A): Клиент инициирует поток, направляя пользовательский агент владельца ресурса к конечной точке авторизации. Клиент включает в себя свой идентификатор клиента, запрошенную область, локальное состояние и URI перенаправления, на который сервер авторизации отправит пользовательский агент обратно после предоставления (или отказа) доступа.

:(B): Сервер авторизации аутентифицирует владельца ресурса (через пользовательский агент) и устанавливает, предоставляет ли владелец ресурса или отклоняет запрос доступа клиента.

:(C): Предполагая, что владелец ресурса предоставляет доступ, сервер авторизации перенаправляет пользовательский агент обратно клиенту, используя предоставленный ранее URI перенаправления. URI перенаправления включает токен доступа во фрагмент URI.

:(D): Пользовательский агент следует инструкциям перенаправления, делая запрос к клиентскому ресурсу, размещенному в Интернете (который не включает фрагмент согласно [RFC2616]). Пользовательский агент сохраняет информацию о фрагменте локально.

:(E): Клиентский ресурс, размещенный в Интернете, возвращает веб-страницу (обычно HTML-документ со встроенным скриптом), способную получить доступ к полному URI перенаправления, включая фрагмент, сохраненный пользовательским агентом, и извлечь токен доступа (и другие параметры). содержится во фрагменте.

:(F): Пользовательский агент выполняет сценарий, предоставленный клиентским ресурсом, размещенным в Интернете, локально, который извлекает токен доступа.

:(G): Пользовательский агент передает токен доступа клиенту.

См. Разделы 1.3.2 и 9 для получения информации об использовании неявного предоставления. См. Разделы 10.3 и 10.16 для ознакомления с важными соображениями безопасности при использовании неявного предоставления.

4.2.1. Запрос на авторизацию
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Клиент создает URI запроса, добавляя следующие параметры к компоненту запроса URI конечной точки авторизации, используя формат ``application/x-www-form-urlencoded`` согласно Приложению B:

response_type
    ОБЯЗАТЕЛЬНЫЙ. Значение ДОЛЖНО быть установлено на ``token``.

client_id
    ОБЯЗАТЕЛЬНЫЙ. Идентификатор клиента, как описано в разделе 2.2.

redirect_uri
    НЕ ОБЯЗАТЕЛЬНЫЙ. Как описано в разделе 3.1.2.

scope
    НЕ ОБЯЗАТЕЛЬНЫЙ. область действия запроса доступа, описанная раздел 3.3.

state
    РЕКОМЕНДУЕМЫЕ. Непрозрачное значение, используемое клиентом для поддержания состояния между запросом и обратным вызовом. Сервер авторизации включает это значение при перенаправлении пользовательского агента обратно клиенту. Параметр СЛЕДУЕТ использовать для предотвращения подделки межсайтовых запросов, как описано в Разделе 10.12.


.. ((?<=\n\n)\s+)|((?<!\n)\n? +)
